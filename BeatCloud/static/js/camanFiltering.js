// Generated by CoffeeScript 1.6.3
(function() {
  var busy, caman, changed, filters, presetBusy, presetCaman, render, renderPreset,
    __hasProp = {}.hasOwnProperty;

  caman = null;

  presetCaman = null;

  filters = {};

  busy = false;

  changed = false;

  render = _.throttle(function() {
    var filter, value;
    if (busy) {
      changed = true;
      return;
    } else {
      changed = false;
    }
    busy = true;
    caman.revert(false);
    for (filter in filters) {
      if (!__hasProp.call(filters, filter)) continue;
      value = filters[filter];
      value = parseFloat(value, 10);
      if (value === 0) {
        continue;
      }
      caman[filter](value);
    }
    return caman.render(function() {
      busy = false;
      if (changed) {
        return render();
      }
    });
  }, 300);

  presetBusy = false;

  renderPreset = function(preset) {
    var $filter, name;
    if (presetBusy) {
      return;
    }
    $("#PresetFilters a").removeClass('Active');
    $filter = $("#PresetFilters a[data-preset='" + preset + "']");
    name = $filter.html();
    $filter.addClass('Active').html('Rendering...');
    presetBusy = true;
    presetCaman.revert(false);
    presetCaman[preset]();
    return presetCaman.render(function() {
      $filter.html(name);
      return presetBusy = false;
    });
  };

  // reset filters
  $("#btn_reset_filters").on("click", function() {
    filters = {};
    render();
    $('.filter-range').val(function() {
      $(this).find('~ .FilterValue').html(0);
      return 0;
    });
  })

  $('#imagemodal').on('show.bs.modal', function (e) {
    // Fired as soon as we attempt to show
    $('#ico_modal_loading').css("opacity", "100");
  })

  $('#imagemodal').on('shown.bs.modal', function (e) {
    // Fired when modal has fully loaded and is in position (transitions are over)
    if (!USING_VIDEO){
      //fire a random slider to kick in filters
       $('#slide_clip').trigger("change");
    }
    $('#ico_modal_loading').css("opacity", "0");

    //hacky but works well
    $("#background_properties").css("height", $("#col_image").height());
  })

  // When user loads a BeatCloud 'Create' preset, we open the image modal to check if they want to change anthing and they can then save them
  $(document).on('BCPresetLoaded', function() {
    // We do not load filter values or layers here as already loaded in set_values() (editImg.js)
    open_image_modal();
  });

  // Prevent opening of modal while uploading
  $(document).on('BCBaseUploadStarted', function() {
    $('#preview-container').off("click");
    $('#edit-bg-icon').addClass("visually-hidden");
    $('#edit-bg-text').addClass("visually-hidden");
  });

  // Allow opening of modal after upload finished and response retrieved
  $(document).on('BCBaseUploadFinished', function() {
    $("#preview-container").on("click", function() {
      loadFilterValues(filterValues);
      import_layers(image_layer_state);
      open_image_modal();
    });
    $('#edit-bg-icon').removeClass("visually-hidden");
    $('#edit-bg-text').removeClass("visually-hidden");
  });
  
  // Allow opening of modal at start
  $(document).ready(function () {
    $("#preview-container").on("click", function() {
      loadFilterValues(filterValues);
      import_layers(image_layer_state);
      open_image_modal();
    });
  });

  function open_image_modal(){
    document.querySelector('#background_canvas').removeAttribute('data-caman-id');
    init_canvas();
    // draw_preview();
    // document.getElementById('layers_status').classList.remove("visually-hidden");
    showhide_layers(true);
    $('#imagemodal').modal('show'); // imagemodal is the id attribute assigned to the bootstrap modal, then i use the show function
  }

  function init_canvas() {
    if (!($("#background_canvas").length > 0)) {
      return;
    }

    if (!USING_VIDEO) {
      path = `/visualizers/${p_v_id}/preview`
      caman = Caman('#background_canvas', path);

      $('.FilterSetting input').each(function() {
        var filter;
        filter = $(this).data('filter');
        return filters[filter] = $(this).val();
      });
      
      $('#Filters').on('change', '.FilterSetting input', function(e) {
        e.stopImmediatePropagation(); //stops event firing twice
        var filter, value;
        filter = $(this).data('filter');
        value = $(this).val();
        filters[filter] = value;
        $(this).find('~ .FilterValue').html(value);
        // document.getElementById('layers_status').classList.remove("visually-hidden");
        // showhide_layers(false); // hide layers
        return render();
      });
    } else {
      ctxBg.clearRect(0,0, canvas_dim[0], canvas_dim[1]); //Draw clear rect and let gif shine thru
    }
  }

}).call(this);
